-----model Department---------
state Department of
  Rooms      : map nat to Troom                      --Аудиторії
  Staff      : map IdPer to Person                   --Персонал
  Students   : map Flow to (seq1 of set of IdPer)    --Студенти 
  Curriculum : map IdDisc to Discipline              --Учбові плани 
  Assignment : map Subject to (map Executor to nat)  --Навантаження
  Schedule   : map Place to Studies                  --Розклад
  IndividWork: map IdPer to IdPer                    --Керівництво курс/дипл. 
  Chairs     : map IdCh to Chair                     --Кафедри
  Print      : map IdPrn to Printing                 --Друковані роботи
  Scientifics: set of Scientific                     --Наукові напрямки ф-ту
  Directions : set of Direction                      --Учбові напрямки ф-ту
init DB ==
  DB = mk_Department({|->}, {|->}, {|->}, {|->}, {|->}, {|->}, {|->} , 
                     {|->} , {|->}, {}, {})
end

-------------------------------------------------- 
types
Chair      :: Title head:[IdPer]                    --Кафедра: назва, завідувач    
              teac:map IdPer to Teacher             --Кафедра: викладачі
              grad:map IdPer to Graduate;           --Кафедра: аспіранти 
IdCh       :: nat;                                  --Номер кафедри 
Teacher    :: Scientific Direction Post [ScienceD]; --Викладач
Graduate   :: Scientific lead:IdPer years:nat;      --Аспірант                                         
Scientific  = String;             --Науковий напрямок:  "Programming", "Algorithm"... 
            --     
Post        = <Professor> | <Assistant> | <AssocProfes>; --Посада   
ScienceD    = <Candidate> | <Doctor>;               --Вчена ступінь 

Person     :: surname:String name:String tel:String sex:(<M>|<W>); --Фізична Особа       
IdPer      :: nat;                                  -- Номер фізичної особи

Flow       :: Speciality years:nat term:(<Aut>|<Spr>|<Sum>); --Потік (спеціальність+рік+семестр)
Speciality  = <ProgInj> | <AppMath>;                --Спеціальність
Title       = String;                               --Назва
IdDisc     :: nat;                                  --Номер дисципліни
Discipline :: Title fl:Flow dir:Direction hours:map Tlean to nat;  --Дисципліна
Direction   = String;        --Учбовий напрямок: "Programming", "Algorithm", "DataBase"  

Subject    :: IdDisc t:Tlean;                         --Предмет
Group      :: Flow num:[nat];                       --Група  
Executor    = IdCh | IdPer;                         --Виконавець
Tlean       = <Lec> | <Sem> | <Com> | <Cnt> | <Ind>;--Тип годин
Place      :: num:nat Day pair:nat;                 --Місце
Day         = <Mon> | <Tue> | <Wed> | <Thu> | <Fri>;--День неділі 
Studies    :: Subject group:[nat] teacher:IdPer;    --Заняття 
Troom      :: type:(<Sem> | <Com>) cnt:nat;         --Характеристика аудиторії      

IdPrn      :: nat;                                  --Номер друкованої роботи
Printing   :: auto:seq of IdPer isAdd:bool tPrint Scientific year:nat tPrint;    --Друков.робота
tPrint      = <Theses> | <Manual> | <Monography> | <Article>;--Тип друк.роботи 
String      = seq of char;

 -----DB------------
Command     = CmPerson | CmLead | AddFlow | AddGroup | AddStudent | 
              DelStudent | AddDiscip | EditDiscip | DelDiscip |
              AddChair | EditChair | AddTeacher | EditTeacher | DelTeacher;
CmPerson    = AddPerson | EditPerson | DelPerson; 
AddPerson  :: Person;       -- 
EditPerson :: IdPer Person;
DelPerson  :: IdPer;
AddFlow    :: Flow;         -- 
AddGroup   :: Flow [nat];   -- 
AddStudent :: Flow [nat] IdPer;         -- 
DelStudent :: IdPer;
AddDiscip  :: IdDisc Discipline;
EditDiscip :: IdDisc Discipline;
DelDiscip  :: IdDisc;
AddChair   :: IdCh Chair;
EditChair  :: IdCh Title [IdPer];
AddTeacher :: IdPer IdCh Teacher;
EditTeacher:: IdPer IdCh Teacher;
DelTeacher :: IdPer IdCh;
CmLead     :: (<Sci> | <Dir>) String; 

functions
allStudents : map Flow to (seq1 of set of IdPer) -> set of IdPer
allStudents(fsm) ==
 dunion { dunion elems fsm(f) | f in set dom fsm};
 
allFlows : map IdDisc to Discipline -> set of Flow
allFlows(idm) ==
  {(idm(id)).fl | id in set dom idm};

allManChairs : (<t> | <g>) * map IdCh to Chair -> set of IdPer
allManChairs(t, chm) ==
  if chm <> {|->} then
    let ch in set dom chm                     in
    let mk_Chair(-,-,tm,gm) = chm(ch),
        ps = if t=<t> then dom tm else dom gm in
    ps union allManChairs(t, {ch} <-: chm)      
  else {};  

iswfStudents : (map Flow to (seq1 of set of IdPer)) * 
                                set of Flow * set of IdPer  -> bool
iswfStudents(fsm, fs, ps) ==
   (dom fsm subset fs) and (allStudents(fsm) subset ps) and
   forall f in set dom fsm &
     (((allStudents({f} <-: fsm) inter (dunion elems fsm(f))) = {})  and
      forall i in set inds fsm(f) & 
        (forall j in set inds fsm(f) &
          ((i=j) or (fsm(f)(i) inter fsm(f)(j) = {}))
        )
     );                                            

iswfCurriculum : map IdDisc to Discipline * set of Direction -> bool
iswfCurriculum(idm, ds) ==
  forall id in set dom idm & (idm(id)).dir in set ds;

cntLeanExecutor : map Executor to nat -> nat
cntLeanExecutor(exm) == 
  if exm = {|->} then 
    let ex in set dom exm in
    exm(ex) + cntLeanExecutor({ex}<-:exm)
  else 0;  

sumList : seq of int -> int
sumList(il) ==
  if il = [] then 0 else hd il + sumList(tl il);

cntLeanStudent : Tlean * seq1 of set of IdPer -> nat
cntLeanStudent(typ, isl) == 
  cases typ:
    <Ind> -> sumList([card isl(i) | i in set inds isl]),
    <Lec> -> 1,
    others -> len isl
  end;  

iswfSubject : Subject * map IdDisc to Discipline -> bool
iswfSubject(mk_Subject(id,t), idm) == 
  id in set dom idm and t in set dom idm(id).hours;

allSubjects : map IdDisc to Discipline * set of Flow -> set of Subject
allSubjects(idm, fs) ==
  dunion { 
          dunion { {mk_Subject(id,t)|t in set dom idm(id).hours}
                 | id in set dom idm & idm(id).fl = f} 
        | f in set fs};

iswfExecutor : Executor *  map IdCh to Chair -> bool
iswfExecutor(ex,chm) ==
  if is_IdCh(ex) then ex in set dom chm
  else ex in set allManChairs(<t>, chm);
  
iswfAssignment : map Subject to (map Executor to nat) * 
                  map IdDisc to Discipline * map IdCh to Chair *
                        map Flow to (seq1 of set of IdPer) -> bool
iswfAssignment(asm, idm, chm, fsm) ==
  allSubjects(idm, dom fsm) = dom asm and
  forall exm in set rng asm & 
     (forall ex in set dom exm & iswfExecutor(ex,chm)) and
  --forall sub in set dom asm & iswfSubject(sub,idm) and
  forall mk_Subject(id,t) in set dom asm &
    cntLeanStudent(t,fsm(idm(id).fl)) 
        = cntLeanExecutor(asm(mk_Subject(id,t)));

addPlanSubject : map Subject to (map IdPer to nat) * Subject * IdPer 
                                -> map Subject to (map IdPer to nat)
addPlanSubject(pl, sub, it) ==
  if sub in set dom pl then
    if it in set dom pl(sub) then
      pl ++ {sub |-> pl(sub) ++ {pl(sub)(it) |-> pl(sub)(it) + 1}}
    else pl ++ {sub |-> pl(sub) munion {it |-> 1}}
  else pl munion {sub |-> {it |-> 1}};

fmPlanSchedule :  map Place to Studies -> map Subject to (map IdPer to nat)
fmPlanSchedule(plm) ==
  if plm <> {|->} then  
    let pl in set dom plm                in
    let mk_Studies(sub,-,it) = plm(pl),
        pls = fmPlanSchedule({pl}<-:plm) in
    addPlanSubject(pls,sub,it)    
  else {|->};

isTeacherEx: map Executor to nat -> bool
isTeacherEx(exm) ==
 exists ex in set dom exm & is_IdPer(ex);
 
tmPlanAssign : map Subject to (map Executor to nat) ->  
                                 map Subject to (map IdPer to nat)
tmPlanAssign(ass) ==
  {sub |-> {it |-> ass(sub)(it) | it in set dom ass(sub) & is_IdPer(it)}                                
     | sub in set dom ass &  
       isTeacherEx(ass(sub)) and (sub.t <> <Cnt>) and (sub.t <> <Ind>) };

iswfSchedule : map Place to Studies * map IdDisc to Discipline *
               map nat to Troom * map Flow to (seq1 of set of IdPer)    
                      * map Subject to (map Executor to nat) -> bool
iswfSchedule(plm,idm,rm,fsm,ass) ==
  fmPlanSchedule(plm) = tmPlanAssign(ass) and 
  forall pl in set dom plm & iswfPlace(pl,plm(pl),idm,rm,fsm);
  
iswfPlace :  Place * Studies * map IdDisc to Discipline * 
       map nat to Troom * map Flow to (seq1 of set of IdPer) -> bool
iswfPlace(mk_Place(r,-,-),mk_Studies(sub,g,-),idm,rm,fsm) ==
  (r in set dom rm) and
   let mk_Troom(tr,cnt) = rm(r)    in
   true;   

iswfChairs : map IdCh to Chair * set of IdPer 
                     * set of Scientific * set of Direction -> bool
iswfChairs(chm, ps, ss, ds) ==
  forall ch in set dom chm &
    (let ts = allManChairs(<t>, {ch} <-: chm),
         gs = allManChairs(<g>, {ch} <-: chm) in 
     iswfChair(chm(ch), ps, ts,gs,ss,ds));       

iswfChair : Chair * set of IdPer * set of IdPer * set of IdPer
                     * set of Scientific * set of Direction -> bool
iswfChair(mk_Chair(-,h,tm,gm), ps, ts, gs, ss, ds) ==
  let chts = dom tm   in 
  ((h = nil) or (h in set chts)) and
  forall ip in set dom tm & iswfTeacher(tm(ip),ss,ds) and
    ((dom tm) subset ps) and ((dom tm) inter ts = {}) and
  forall ip in set dom gm & iswfGraduate(gm(ip),ss, chts) and   
    ((dom gm) subset ps) and ((dom gm) inter gs = {}) ;             

iswfTeacher : Teacher * set of Scientific * set of Direction -> bool
iswfTeacher(mk_Teacher(sci, dir, -,-), ss, ds) ==
  (sci in set ss) and (dir in set ds);  

iswfGraduate : Graduate  * set of Scientific * set of IdPer -> bool
iswfGraduate(mk_Graduate(sci, ld, -), ss, ts) ==
  (sci in set ss) and (ld in set ts);



operations

